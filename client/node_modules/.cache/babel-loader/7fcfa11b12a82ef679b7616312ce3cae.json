{"ast":null,"code":"var _jsxFileName = \"/Users/oscar/Desktop/test/Tempify/client/src/components/Register/DentalRegister.js\";\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { withStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport './Register.css';\nimport CheckboxValidatorElement from '../CheckboxValidatorElement/CheckboxValidatorElement';\n\nconst useStyles = theme => ({\n  textField: {\n    width: '100%',\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1)\n  },\n  label: {\n    '&$focused': {\n      color: '#00bfff'\n    }\n  },\n  labelAsterisk: {\n    color: '#ff0000'\n  },\n  focused: {},\n  outlinedInput: {\n    '&$focused $notchedOutline': {\n      border: '1px solid #00bfff'\n    }\n  },\n  notchedOutline: {},\n  button: {\n    margin: theme.spacing(1)\n  },\n  input: {\n    display: 'none'\n  }\n});\n\nconst parking = [{\n  value: 'Free',\n  label: 'Free'\n}, {\n  value: 'Paid/Street',\n  label: 'Paid/Street'\n}, {\n  value: 'No Parking',\n  label: 'No Parking'\n}];\n\nclass Register extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitForm = event => {\n      event.preventDefault();\n      var data = {\n        officeName: this.state.officeName,\n        email: this.state.email,\n        password: this.state.password,\n        name: this.state.name,\n        phone: this.state.phone,\n        streetNo: this.state.streetNo,\n        streetName: this.state.streetName,\n        unit: this.state.unit,\n        city: this.state.city,\n        province: this.state.province,\n        postalCode: this.state.postalCode,\n        parking: this.state.parking\n      };\n      fetch(\"http://localhost:3001/dentalRegister\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        console.log(response);\n      }).then(function (data) {\n        console.log(data);\n      }).catch(function (err) {\n        console.log(err);\n      });\n      this.props.history.push(\"/\");\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleCheckboxChange = e => {\n      this.setState({\n        accept: e.target.checked\n      });\n    };\n\n    this.state = {\n      officeName: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      name: '',\n      phone: '',\n      streetNo: '',\n      streetName: '',\n      unit: '',\n      city: '',\n      province: '',\n      postalCode: '',\n      parking: parking[0].value\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule('isPasswordMatch', value => {\n      if (value !== this.state.password) {\n        return false;\n      }\n\n      return true;\n    });\n    ValidatorForm.addValidationRule('isTruthy', value => value);\n  }\n\n  componentWillUnmount() {\n    ValidatorForm.removeValidationRule('isPasswordMatch');\n    ValidatorForm.removeValidationRule('isTruthy');\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(\"div\", {\n      className: \"register\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(ValidatorForm, {\n      ref: \"form\",\n      onSubmit: e => this.submitForm(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      align: \"center\",\n      className: \"header1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"DENTAL OFFICE REGISTRATION\"), React.createElement(Grid, {\n      container: true,\n      spacing: 6,\n      className: \"container1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"officeName\",\n      name: \"officeName\",\n      value: this.state.officeName,\n      label: \"Office Name\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      autoComplete: \"name\",\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"email\",\n      name: \"email\",\n      value: this.state.email,\n      label: \"Email address\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      autoComplete: \"email\",\n      validators: ['required', 'isEmail'],\n      errorMessages: ['This field is required', 'This is not a valid email'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"password\",\n      name: \"password\",\n      value: this.state.password,\n      type: \"password\",\n      label: \"Password\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"confirmPassword\",\n      name: \"confirmPassword\",\n      value: this.state.confirmPassword,\n      type: \"password\",\n      label: \"Confirm password\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      validators: ['required', 'isPasswordMatch'],\n      errorMessages: ['This field is required', 'Passwords do not match'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"name\",\n      name: \"name\",\n      value: this.state.name,\n      label: \"Your name\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      autoComplete: \"name\",\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"phone\",\n      name: \"phone\",\n      label: \"Phone\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      value: this.state.phone,\n      validators: ['required', 'minStringLength:10', 'minStringLength:10', 'isNumber'],\n      errorMessages: ['This field is required', 'Value should be 10 digits', 'Value should be 10 digits', 'Must be a number'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"streetNo\",\n      name: \"streetNo\",\n      label: \"Street Number\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      defaultValue: \"none\",\n      value: this.state.streetNo,\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"streetName\",\n      name: \"streetName\",\n      label: \"Street Name\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      defaultValue: \"none\",\n      value: this.state.streetName,\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"unit\",\n      name: \"unit\",\n      value: this.state.unit,\n      label: \"Unit\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"city\",\n      name: \"city\",\n      label: \"City\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      defaultValue: \"none\",\n      value: this.state.city,\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"province\",\n      name: \"province\",\n      label: \"Province\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      defaultValue: \"none\",\n      value: this.state.province,\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"postalCode\",\n      name: \"postalCode\",\n      label: \"Postal Code\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      defaultValue: \"none\",\n      value: this.state.postalCode,\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      select: true,\n      id: \"parking\",\n      name: \"parking\",\n      label: \"Parking\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      defaultValue: \"none\",\n      value: this.state.parking,\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }, parking.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }, option.label)))), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }, React.createElement(FormControlLabel, {\n      control: React.createElement(CheckboxValidatorElement, {\n        color: \"primary\",\n        name: \"accept\",\n        validators: ['isTruthy'],\n        errorMessages: ['This field is required'],\n        onChange: this.handleCheckboxChange,\n        checked: this.state.accept,\n        value: this.state.accept,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 582\n        },\n        __self: this\n      }),\n      label: \"I Accept\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }), React.createElement(Link, {\n      component: \"button\",\n      variant: \"body2\",\n      onClick: () => {\n        alert(\"Hi, I'm Terms and conditions.\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }, \"Terms and Conditions\")), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"blueButton\",\n      color: \"primary\",\n      variant: \"contained\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }, \"SUBMIT FORM\")))));\n  }\n\n}\n\nexport default withStyles(useStyles)(Register);","map":{"version":3,"sources":["/Users/oscar/Desktop/test/Tempify/client/src/components/Register/DentalRegister.js"],"names":["React","Grid","Typography","TextField","FormControlLabel","Checkbox","withStyles","MenuItem","Button","Link","ValidatorForm","TextValidator","CheckboxValidatorElement","useStyles","theme","textField","width","marginLeft","spacing","marginRight","label","color","labelAsterisk","focused","outlinedInput","border","notchedOutline","button","margin","input","display","parking","value","Register","Component","constructor","props","submitForm","event","preventDefault","data","officeName","state","email","password","name","phone","streetNo","streetName","unit","city","province","postalCode","fetch","method","headers","body","JSON","stringify","then","response","console","log","catch","err","history","push","handleChange","e","setState","target","handleCheckboxChange","accept","checked","confirmPassword","bind","componentDidMount","addValidationRule","componentWillUnmount","removeValidationRule","render","classes","shrink","root","asterisk","map","option","alert"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { withStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\nimport './Register.css'\nimport CheckboxValidatorElement from '../CheckboxValidatorElement/CheckboxValidatorElement';\n\nconst useStyles = theme => ({\n  textField: {\n    width: '100%',\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  label: {\n    '&$focused': {\n      color: '#00bfff'\n    },\n  },\n  labelAsterisk: {\n    color: '#ff0000'\n  },\n  focused: {},\n  outlinedInput: {\n    '&$focused $notchedOutline': {\n      border: '1px solid #00bfff'\n    },\n  },\n  notchedOutline: {},\n  button: {\n    margin: theme.spacing(1),\n  },\n  input: {\n    display: 'none',\n  },\n});\n\nconst parking = [\n  {\n    value: 'Free',\n    label: 'Free',\n  },\n  {\n    value: 'Paid/Street',\n    label: 'Paid/Street',\n  },\n  {\n    value: 'No Parking',\n    label: 'No Parking',\n  },\n];\n\nclass Register extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      officeName: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      name: '',\n      phone: '',\n      streetNo: '',\n      streetName: '',\n      unit: '',\n      city: '',\n      province: '',\n      postalCode: '',\n      parking: parking[0].value,\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\n      if(value !== this.state.password) {\n        return false;\n      } \n      return true;\n    });\n    ValidatorForm.addValidationRule('isTruthy', value => value);\n\n  }\n\n  componentWillUnmount() {\n    ValidatorForm.removeValidationRule('isPasswordMatch');\n    ValidatorForm.removeValidationRule('isTruthy');\n  }\n\n  submitForm = (event) => {\n    event.preventDefault();\n\n    var data = {\n        officeName: this.state.officeName,\n        email: this.state.email,\n        password: this.state.password,\n        name: this.state.name,\n        phone: this.state.phone,\n        streetNo: this.state.streetNo,\n        streetName: this.state.streetName,\n        unit: this.state.unit,\n        city: this.state.city,\n        province: this.state.province,\n        postalCode: this.state.postalCode,\n        parking: this.state.parking,\n    }\n    fetch(\"http://localhost:3001/dentalRegister\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(function(response) {\n      console.log(response);\n    }).then(function(data) {\n      console.log(data);\n    }).catch(function(err) {\n        console.log(err);\n    });\n    this.props.history.push(\"/\");\n  }\n\n  handleChange = (e) => {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  handleCheckboxChange = (e) => {\n    this.setState({accept: e.target.checked})\n  }\n\n  render() {\n\n    const { classes } = this.props;\n    return (\n      <div className=\"register\">\n        <ValidatorForm ref=\"form\" onSubmit={(e) => this.submitForm(e)}>\n          <Typography align=\"center\" className=\"header1\">\n            DENTAL OFFICE REGISTRATION\n          </Typography>\n\n          <Grid container spacing={6} className=\"container1\">\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"officeName\"\n                name=\"officeName\"\n                value={this.state.officeName}\n                label=\"Office Name\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                autoComplete=\"name\"\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"email\"\n                name=\"email\"\n                value={this.state.email}\n                label=\"Email address\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                autoComplete=\"email\"\n                validators={['required', 'isEmail']}\n                errorMessages={['This field is required', 'This is not a valid email']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                type=\"password\"\n                label=\"Password\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                value={this.state.confirmPassword}\n                type=\"password\"\n                label=\"Confirm password\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                validators={['required', 'isPasswordMatch']}\n                errorMessages={['This field is required', 'Passwords do not match']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"name\"\n                name=\"name\"\n                value={this.state.name}\n                label=\"Your name\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                autoComplete=\"name\"\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"phone\"\n                name=\"phone\"\n                label=\"Phone\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                value={this.state.phone}\n                validators={['required', 'minStringLength:10', 'minStringLength:10', 'isNumber']}\n                errorMessages={['This field is required', 'Value should be 10 digits', 'Value should be 10 digits', 'Must be a number']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              />\n            </Grid>\n            \n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"streetNo\"\n                name=\"streetNo\"\n                label=\"Street Number\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                defaultValue=\"none\"\n                value={this.state.streetNo}\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              >\n              </TextValidator>\n            </Grid>\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"streetName\"\n                name=\"streetName\"\n                label=\"Street Name\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                defaultValue=\"none\"\n                value={this.state.streetName}\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              >\n              </TextValidator>\n            </Grid>\n\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"unit\"\n                name=\"unit\"\n                value={this.state.unit}\n                label=\"Unit\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"city\"\n                name=\"city\"\n                label=\"City\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                defaultValue=\"none\"\n                value={this.state.city}\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              >\n              </TextValidator>\n            </Grid>\n\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"province\"\n                name=\"province\"\n                label=\"Province\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                defaultValue=\"none\"\n                value={this.state.province}\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              >\n              </TextValidator>\n              </Grid>\n              <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"postalCode\"\n                name=\"postalCode\"\n                label=\"Postal Code\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                defaultValue=\"none\"\n                value={this.state.postalCode}\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              >\n              </TextValidator>\n            </Grid>\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                select\n                id=\"parking\"\n                name=\"parking\"\n                label=\"Parking\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                defaultValue=\"none\"\n                value={this.state.parking}\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              >\n              {parking.map(option => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n              </TextValidator>\n            </Grid>\n\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={<CheckboxValidatorElement color=\"primary\" name=\"accept\" validators={['isTruthy']}\n                errorMessages={['This field is required']}\n                onChange={this.handleCheckboxChange}\n                checked={this.state.accept}\n                value={this.state.accept} />}\n                label=\"I Accept\"\n              />\n              <Link\n                component=\"button\"\n                variant=\"body2\"\n                onClick={() => {\n                  alert(\"Hi, I'm Terms and conditions.\");\n                }}>\n                Terms and Conditions\n              </Link>\n            </Grid>\n            <Grid item xs={12} align=\"center\">\n              <Button className=\"blueButton\" color=\"primary\" variant=\"contained\" type=\"submit\">\n                SUBMIT FORM\n              </Button>\n            </Grid>\n          </Grid>\n        </ValidatorForm>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(useStyles)(Register);"]},"metadata":{},"sourceType":"module"}
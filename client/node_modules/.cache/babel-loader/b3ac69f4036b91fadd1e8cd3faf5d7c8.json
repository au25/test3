{"ast":null,"code":"var _jsxFileName = \"/Users/oscar/Desktop/test/Tempify/client/src/components/Register/TempRegister.js\";\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { withStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { Redirect } from 'react-router';\nimport './Register.css';\nimport CheckboxValidatorElement from '../CheckboxValidatorElement/CheckboxValidatorElement';\n\nconst useStyles = theme => ({\n  textField: {\n    width: '100%',\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1)\n  },\n  label: {\n    '&$focused': {\n      color: '#00bfff'\n    }\n  },\n  labelAsterisk: {\n    color: '#ff0000'\n  },\n  focused: {},\n  outlinedInput: {\n    '&$focused $notchedOutline': {\n      border: '1px solid #00bfff'\n    }\n  },\n  notchedOutline: {},\n  button: {\n    margin: theme.spacing(1)\n  },\n  input: {\n    display: 'none'\n  }\n});\n\nconst city = [{\n  value: 'Vancouver',\n  label: 'Vancouver'\n}, {\n  value: 'North Vancouver',\n  label: 'North Vancouver'\n}, {\n  value: 'New Westminster',\n  label: 'New Westminster'\n}, {\n  value: 'Tri-Cities',\n  label: 'Tri-Cities'\n}, {\n  value: 'Surrey',\n  label: 'Surrey'\n}, {\n  value: 'Richmond',\n  label: 'Richmond'\n}, {\n  value: 'White Rock',\n  label: 'White Rock'\n}, {\n  value: 'Langley(Fraser Valley)',\n  label: 'Langley(Fraser Valley)'\n}];\nconst role = [{\n  value: 'none',\n  label: '- What do you do? -'\n}, {\n  value: 'Assistant',\n  label: 'Assistant'\n}, {\n  value: 'Registered Dental Hygienist',\n  label: 'Registered Dental Hygienist'\n}, {\n  value: 'Receptionist',\n  label: 'Receptionist'\n}];\nconst practice = [{\n  value: 'General',\n  label: 'General'\n}, {\n  value: 'Ortho',\n  label: 'Ortho'\n}, {\n  value: 'Endo',\n  label: 'Endo'\n}];\nconst dentalsw = [{\n  value: 'none',\n  label: '- Dental Software Used -'\n}, {\n  value: 'Dentrix',\n  label: 'Dentrix'\n}, {\n  value: 'Cleardent',\n  label: 'Cleardent'\n}, {\n  value: 'Tracker',\n  label: 'Tracker'\n}, {\n  value: 'Other',\n  label: 'Other'\n}, {\n  value: 'None',\n  label: 'None'\n}];\n\nclass Register extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitForm = event => {\n      event.preventDefault();\n      var data = {\n        name: this.state.name,\n        email: this.state.email,\n        password: this.state.password,\n        experience: this.state.experience,\n        expectedRate: this.state.expectedRate,\n        city: this.state.city,\n        role: this.state.role,\n        license: this.state.license,\n        practice: this.state.practice,\n        dentalsw: this.state.dentalsw\n      };\n      fetch(\"http://localhost:3001/tempRegister\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        console.log(response);\n      }).then(function (data) {\n        console.log(data);\n      }).catch(function (err) {\n        console.log(err);\n      });\n      this.props.history.push(\"/\");\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleCheckboxChange = e => {\n      this.setState({\n        accept: e.target.checked\n      });\n    };\n\n    this.state = {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      experience: '',\n      expectedRate: '',\n      city: city[0].value,\n      role: role[0].value,\n      license: '',\n      practice: practice[0].value,\n      dentalsw: dentalsw[0].value,\n      accept: false,\n      error: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule('isPasswordMatch', value => {\n      if (value !== this.state.password) {\n        return false;\n      }\n\n      return true;\n    });\n    ValidatorForm.addValidationRule('isTruthy', value => value);\n  }\n\n  componentWillUnmount() {\n    ValidatorForm.removeValidationRule('isPasswordMatch');\n    ValidatorForm.removeValidationRule('isTruthy');\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(\"div\", {\n      className: \"register\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(ValidatorForm, {\n      ref: \"form\",\n      onSubmit: e => this.submitForm(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      align: \"center\",\n      className: \"header1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"TEMP REGISTRATION\"), React.createElement(Typography, {\n      align: \"center\",\n      style: {\n        color: 'red'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, this.state.error), React.createElement(Grid, {\n      container: true,\n      spacing: 6,\n      className: \"container1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"name\",\n      name: \"name\",\n      value: this.state.name,\n      label: \"Your name\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      autoComplete: \"name\",\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"email\",\n      name: \"email\",\n      value: this.state.email,\n      label: \"Email address\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      autoComplete: \"email\",\n      validators: ['required', 'isEmail'],\n      errorMessages: ['This field is required', 'This is not a valid email'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"password\",\n      name: \"password\",\n      value: this.state.password,\n      type: \"password\",\n      label: \"Password\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"confirmPassword\",\n      name: \"confirmPassword\",\n      value: this.state.confirmPassword,\n      type: \"password\",\n      label: \"Confirm password\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      validators: ['required', 'isPasswordMatch'],\n      errorMessages: ['This field is required', 'Passwords do not match'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"experience\",\n      name: \"experience\",\n      type: \"number\",\n      label: \"Years of experience\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      value: this.state.experience,\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"expRate\",\n      name: \"expectedRate\",\n      label: \"Expected rate [$]\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      value: this.state.expectedRate,\n      validators: ['required', 'minNumber:20', 'maxNumber:60'],\n      errorMessages: ['This field is required', 'Value should be between 20 and 60', 'Value should be between 20 and 60'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      select: true,\n      id: \"city\",\n      name: \"city\",\n      label: \"Select city\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      defaultValue: \"none\",\n      value: this.state.city,\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, city.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, option.label)))), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      select: true,\n      id: \"role\",\n      name: \"role\",\n      label: \"Required\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      defaultValue: \"none\",\n      value: this.state.role,\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, role.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, option.label)))), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      id: \"license\",\n      name: \"license\",\n      value: this.state.license,\n      label: \"Required\",\n      placeholder: \"License number?\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      select: true,\n      id: \"practice\",\n      name: \"practice\",\n      label: \"Required\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      defaultValue: \"none\",\n      value: this.state.practice,\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, practice.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }, option.label)))), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      required: true,\n      fullWidth: true,\n      select: true,\n      id: \"dentalsw\",\n      name: \"dentalsw\",\n      label: \"Required\",\n      className: classes.textField,\n      margin: \"normal\",\n      variant: \"outlined\",\n      defaultValue: \"none\",\n      value: this.state.dentalsw,\n      validators: ['required'],\n      errorMessages: ['This field is required'],\n      onChange: this.handleChange,\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label,\n          focused: classes.focused,\n          asterisk: classes.labelAsterisk\n        }\n      },\n      InputProps: {\n        classes: {\n          root: classes.outlinedInput,\n          focused: classes.focused,\n          notchedOutline: classes.notchedOutline\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }, dentalsw.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      disabled: option.disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }, option.label)))), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      accept: \"./image/*\",\n      id: \"image-upload\",\n      multiple: true,\n      type: \"file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, React.createElement(FormControlLabel, {\n      control: React.createElement(CheckboxValidatorElement, {\n        color: \"primary\",\n        name: \"accept\",\n        validators: ['isTruthy'],\n        errorMessages: ['This field is required'],\n        onChange: this.handleCheckboxChange,\n        checked: this.state.accept,\n        value: this.state.accept,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 623\n        },\n        __self: this\n      }),\n      label: \"I Accept\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }), React.createElement(Link, {\n      component: \"button\",\n      variant: \"body2\",\n      onClick: () => {\n        alert(\"Hi, I'm Terms and conditions.\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, \"Terms and Conditions\")), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"blueButton\",\n      color: \"primary\",\n      variant: \"contained\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, \"SUBMIT FORM\")))));\n  }\n\n}\n\nexport default withStyles(useStyles)(Register);","map":{"version":3,"sources":["/Users/oscar/Desktop/test/Tempify/client/src/components/Register/TempRegister.js"],"names":["React","Grid","Typography","TextField","FormControlLabel","Checkbox","withStyles","MenuItem","Button","Link","ValidatorForm","TextValidator","Redirect","CheckboxValidatorElement","useStyles","theme","textField","width","marginLeft","spacing","marginRight","label","color","labelAsterisk","focused","outlinedInput","border","notchedOutline","button","margin","input","display","city","value","role","practice","dentalsw","Register","Component","constructor","props","submitForm","event","preventDefault","data","name","state","email","password","experience","expectedRate","license","fetch","method","headers","body","JSON","stringify","then","response","console","log","catch","err","history","push","handleChange","e","setState","target","handleCheckboxChange","accept","checked","confirmPassword","error","bind","componentDidMount","addValidationRule","componentWillUnmount","removeValidationRule","render","classes","shrink","root","asterisk","map","option","disabled","alert"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { withStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\nimport { Redirect } from 'react-router';\nimport './Register.css'\nimport CheckboxValidatorElement from '../CheckboxValidatorElement/CheckboxValidatorElement';\n\nconst useStyles = theme => ({\n  textField: {\n    width: '100%',\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  label: {\n    '&$focused': {\n      color: '#00bfff'\n    },\n  },\n  labelAsterisk: {\n    color: '#ff0000'\n  },\n  focused: {},\n  outlinedInput: {\n    '&$focused $notchedOutline': {\n      border: '1px solid #00bfff'\n    },\n  },\n  notchedOutline: {},\n  button: {\n    margin: theme.spacing(1),\n  },\n  input: {\n    display: 'none',\n  },\n});\n\nconst city = [\n  {\n    value: 'Vancouver',\n    label: 'Vancouver',\n  },\n  {\n    value: 'North Vancouver',\n    label: 'North Vancouver',\n  },\n  {\n    value: 'New Westminster',\n    label: 'New Westminster',\n  },\n  {\n    value: 'Tri-Cities',\n    label: 'Tri-Cities',\n  },\n  {\n    value: 'Surrey',\n    label: 'Surrey',\n  },\n  {\n    value: 'Richmond',\n    label: 'Richmond',\n  },\n  {\n    value: 'White Rock',\n    label: 'White Rock',\n  },\n  {\n    value: 'Langley(Fraser Valley)',\n    label: 'Langley(Fraser Valley)',\n  },\n];\n\nconst role = [\n  {\n    value: 'none',\n    label: '- What do you do? -',\n  },\n  {\n    value: 'Assistant',\n    label: 'Assistant',\n  },\n  {\n    value: 'Registered Dental Hygienist',\n    label: 'Registered Dental Hygienist',\n  },\n  {\n    value: 'Receptionist',\n    label: 'Receptionist',\n  },\n];\n\nconst practice = [\n  {\n    value: 'General',\n    label: 'General',\n  },\n  {\n    value: 'Ortho',\n    label: 'Ortho',\n  },\n  {\n    value: 'Endo',\n    label: 'Endo',\n  },\n];\n\nconst dentalsw = [\n  {\n    value: 'none',\n    label: '- Dental Software Used -',\n  },\n  {\n    value: 'Dentrix',\n    label: 'Dentrix',\n  },\n  {\n    value: 'Cleardent',\n    label: 'Cleardent',\n  },\n  {\n    value: 'Tracker',\n    label: 'Tracker',\n  },\n  {\n    value: 'Other',\n    label: 'Other',\n  },\n  {\n    value: 'None',\n    label: 'None',\n  },\n];\n\nclass Register extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      experience: '',\n      expectedRate: '',\n      city: city[0].value,\n      role: role[0].value,\n      license: '',\n      practice: practice[0].value,\n      dentalsw: dentalsw[0].value,\n      accept: false,\n      error: '',\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\n      if(value !== this.state.password) {\n        return false;\n      } \n      return true;\n    });\n    ValidatorForm.addValidationRule('isTruthy', value => value);\n  }\n\n  componentWillUnmount() {\n    ValidatorForm.removeValidationRule('isPasswordMatch');\n    ValidatorForm.removeValidationRule('isTruthy');\n  }\n\n  submitForm = (event) => {\n    event.preventDefault();\n\n    var data = {\n      name: this.state.name,\n      email: this.state.email,\n      password: this.state.password,\n      experience: this.state.experience,\n      expectedRate: this.state.expectedRate,\n      city: this.state.city,\n      role: this.state.role,\n      license: this.state.license,\n      practice: this.state.practice,\n      dentalsw: this.state.dentalsw\n    }\n    fetch(\"http://localhost:3001/tempRegister\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(function(response) {\n      console.log(response);\n    }).then(function(data) {\n      console.log(data);\n    }).catch(function(err) {\n        console.log(err);\n    });\n    this.props.history.push(\"/\");\n  }\n\n  handleChange = (e) => {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  handleCheckboxChange = (e) => {\n    this.setState({accept: e.target.checked})\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className=\"register\">\n        <ValidatorForm ref=\"form\" onSubmit={(e) => this.submitForm(e)}>\n          <Typography align=\"center\" className=\"header1\">\n            TEMP REGISTRATION\n          </Typography>\n          <Typography align=\"center\" style={{color: 'red'}}>\n            {this.state.error}\n          </Typography>\n          <Grid container spacing={6} className=\"container1\">\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"name\"\n                name=\"name\"\n                value={this.state.name}\n                label=\"Your name\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                autoComplete=\"name\"\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"email\"\n                name=\"email\"\n                value={this.state.email}\n                label=\"Email address\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                autoComplete=\"email\"\n                validators={['required', 'isEmail']}\n                errorMessages={['This field is required', 'This is not a valid email']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                type=\"password\"\n                label=\"Password\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                value={this.state.confirmPassword}\n                type=\"password\"\n                label=\"Confirm password\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                validators={['required', 'isPasswordMatch']}\n                errorMessages={['This field is required', 'Passwords do not match']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"experience\"\n                name=\"experience\"\n                type=\"number\"\n                label=\"Years of experience\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                value={this.state.experience}\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"expRate\"\n                name=\"expectedRate\"\n                label=\"Expected rate [$]\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                value={this.state.expectedRate}\n                validators={['required', 'minNumber:20', 'maxNumber:60']}\n                errorMessages={['This field is required', 'Value should be between 20 and 60', 'Value should be between 20 and 60']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              />\n            </Grid>\n            \n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                select\n                id=\"city\"\n                name=\"city\"\n                label=\"Select city\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                defaultValue=\"none\"\n                value={this.state.city}\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              >\n                {city.map(option => (\n                  <MenuItem key={option.value} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextValidator>\n            </Grid>\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                select\n                id=\"role\"\n                name=\"role\"\n                label=\"Required\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                defaultValue=\"none\"\n                value={this.state.role}\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              >\n                {role.map(option => (\n                  <MenuItem key={option.value} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextValidator>\n            </Grid>\n\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                id=\"license\"\n                name=\"license\"\n                value={this.state.license}\n                label=\"Required\"\n                placeholder=\"License number?\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                select\n                id=\"practice\"\n                name=\"practice\"\n                label=\"Required\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                defaultValue=\"none\"\n                value={this.state.practice}\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              >\n                {practice.map(option => (\n                  <MenuItem key={option.value} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextValidator>\n            </Grid>\n\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <TextValidator\n                required\n                fullWidth\n                select\n                id=\"dentalsw\"\n                name=\"dentalsw\"\n                label=\"Required\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                defaultValue=\"none\"\n                value={this.state.dentalsw}\n                validators={['required']}\n                errorMessages={['This field is required']}\n                onChange={this.handleChange}\n                InputLabelProps={{\n                  shrink: true,\n                  classes: {\n                    root: classes.label,\n                    focused: classes.focused,\n                    asterisk: classes.labelAsterisk,\n                  },\n                }}\n                InputProps={{\n                  classes: {\n                    root: classes.outlinedInput,\n                    focused: classes.focused,\n                    notchedOutline: classes.notchedOutline,\n                  },\n                }}\n              >\n                {dentalsw.map(option => (\n                  <MenuItem key={option.value} value={option.value} disabled={option.disabled}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextValidator>\n            </Grid>\n            <Grid item xs={12} sm={6} className=\"container2\">\n              <input\n                accept=\"./image/*\"\n                id=\"image-upload\"\n                multiple\n                type=\"file\"\n              />\n            </Grid>\n\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={<CheckboxValidatorElement color=\"primary\" name=\"accept\" validators={['isTruthy']}\n                errorMessages={['This field is required']}\n                onChange={this.handleCheckboxChange}\n                checked={this.state.accept}\n                value={this.state.accept} />}\n                label=\"I Accept\"\n              />\n              <Link\n                component=\"button\"\n                variant=\"body2\"\n                onClick={() => {\n                  alert(\"Hi, I'm Terms and conditions.\");\n                }}>\n                Terms and Conditions\n              </Link>\n            </Grid>\n            <Grid item xs={12} align=\"center\">\n              <Button className=\"blueButton\" color=\"primary\" variant=\"contained\" type=\"submit\">\n                SUBMIT FORM\n              </Button>\n            </Grid>\n          </Grid>\n        </ValidatorForm>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(useStyles)(Register);"]},"metadata":{},"sourceType":"module"}